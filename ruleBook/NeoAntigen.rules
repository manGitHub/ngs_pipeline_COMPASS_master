HLA ={}
LOHHLA = []
NORM_CALLS = []
if 'subject' in config:
	for subject in config['subject']:
		for library in config['subject'][subject]:
			if config['sample_captures'][library] not in config['Panel_List']:
#				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/seq2HLA/"+library+"-ClassI.HLAgenotype4digits"] stopped Aug 2023
#				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/HLAminer/HLAminer_HPTASR.csv"]	stopped Aug 2023
				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/"+library+".Calls.txt"]
				TARGET	  += [subject+"/"+TIME+"/"+library+"/HLA/OptiType/"+library+"_result.tsv"]
				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/HLA-HD/"+library+"_final.result.txt"]
				if config["sample_type"][library] =='Tumor':
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_hla_cn.txt"]
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_LOHstatus.txt"]
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_hla_input.txt"]
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_purityinput.txt"]
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+".LOHHLA.pdf"]
					TARGET +=[subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_Alleles_not_processed.txt"]
					LOHHLA = [subject+"/"+TIME+"/"+library+"/HLA/LOHHLA/"+library+"_LOHstatus.txt"]

if 'sample_references' in config:
	if len(config['sample_references']) > 0:
		for Tumor in config['sample_references']:
			for Normal in config['sample_references'][Tumor]:
				OptiType    = "{subject}/{TIME}/{sample}/HLA/OptiType/{sample}_result.tsv".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal)
				HLA_HD   = "{subject}/{TIME}/{sample}/HLA/HLA-HD/{sample}_final.result.txt".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal)
				NORM_CALLS = "{subject}/{TIME}/{sample}/HLA/{sample}.Calls.txt".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal)
				if config['sample_captures'][Tumor] not in config['Panel_List']:
					# any output which is desired on all somatic libraries but Panel goes here, the list of panel captures should be maintained in the Panel_List in config file
					HLA[Tumor] = [OptiType, HLA_HD]
	for sample in config['sample_references'].keys():
		subject=SAMPLE_TO_SUBJECT[sample]
		if config['sample_captures'][sample] not in config['Panel_List']:
			TARGET    +=[subject+"/"+TIME+"/"+sample+"/NeoAntigen/MHC_Class_I/"+sample+".final.tsv"]

if 'RNASeq' in config:
	for subject  in config['RNASeq'].keys():
		for sample in SAM_RNASEQ[subject]:
#			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/seq2HLA/"+sample+"-ClassI.HLAgenotype4digits"] stopped Aug 2023
#			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/HLAminer/HLAminer_HPTASR.csv"] stopped Aug 2023
			TARGET    += [subject+"/"+TIME+"/"+sample+"/HLA/OptiType/"+sample+"_result.tsv"]
			TARGET    += [subject+"/"+TIME+"/"+sample+"/HLA/HLA-HD/"+sample+"_final.result.txt"]
			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/"+sample+".Calls.txt"]

############
#	seq2HLA
############
rule seq2HLA:
	input:  R=lambda wildcards: FQ[wildcards.sample],
		#R1="{base}/{TIME}/FQ/{sample}_R1.fastq.gz",
		#R2="{base}/{TIME}/FQ/{sample}_R2.fastq.gz",
		    script=NGS_PIPELINE + "/seq2HLA/seq2HLA.py"
	output:
		"{base}/{TIME}/{sample}/HLA/seq2HLA/{sample}-ClassI.HLAgenotype4digits"
	params:
		rulename= "seq2HLA",
		python  = config["version_old_python"],
		R	= config['version_R'],
		bowtie	= config['bowtie'],
		batch	= config[config['host']]["job_annovar"],
		HLA	= config['HLA']
	shell: """
	#######################
	module load python/{params.python} R/{params.R}
	PATH=/data/Compass/local/software/bowtie/1.1.1/bin:$PATH
	python {input.script} {params.HLA}/seq2HLA/ -1 {input.R[0]} -2 {input.R[1]}  -p 2 -r {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/seq2HLA/{wildcards.sample}
	#######################
	"""
############
#	HLAminer
############
rule HLAminer:
	input:	R=lambda wildcards: FQ[wildcards.sample],
		#R1="{base}/{TIME}/FQ/{sample}_R1.fastq.gz",
		#R2="{base}/{TIME}/FQ/{sample}_R2.fastq.gz",
		script=NGS_PIPELINE+"/HLAminer_v1.3.1/bin/HPTASRwgs_classI.sh"
	output: "{base}/{TIME}/{sample}/HLA/HLAminer/HLAminer_HPTASR.csv"
	params:
		rulename="HLAminer",
		batch	=config[config['host']]["job_annovar"],
		HLA	=config['HLA'],
        workdir=WORK_DIR,
		location=NGS_PIPELINE
	shell: """
	#######################
	#echo {params.workdir}/{input.R[0]} >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof
	#echo {params.workdir}/{input.R[1]} >>{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof

	echo {input.R[0]} >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof
	echo {input.R[1]} >>{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof

	module load HLAminer/1.3.1
	sh $HLAMINER_BIN/HPTASRwgs_classI.sh $HLAMINER_BIN {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/
	#######################
	"""
############
#       OptiType
############
rule OptiType:
	input:
		R=lambda wildcards: FQ[wildcards.sample]
	output:
		"{base}/{TIME}/{sample}/HLA/OptiType/{sample}_result.tsv"
	version:
		config["optitype"]
	params:
		rulename="OptiType",
		batch	=config[config['host']]["job_optitype"],
		opti    =config['optitype_config'],
		type	=lambda wildcards: config['sample_type'][wildcards.sample]
	shell: """
	#######################
	module load OptiType/{version}
	if [ {params.type} == 'RNAseq' ]; then
		type='--rna'
	else
		type='--dna'
	fi
	if [[$(OptiTypePipeline.py -i {input.R[0]} {input.R[1]} $type -v -o {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/OptiType/ -c {params.opti} --prefix {wildcards.sample} 2>&1 | grep -m 1 -e "need more than 0 values to unpack" -e "The constraint expression resolved to a trivial Boolean (False) instead of a Pyomo object.")]]; then
	echo "no HLA called, output empty file"
	touch {output}
	fi
	#######################
	"""
############
#       HLA-HD
############
rule HLA_HD:
	input:
		R=lambda wildcards: FQ[wildcards.sample]
	output:
		"{base}/{TIME}/{sample}/HLA/HLA-HD/{sample}_final.result.txt"
	version:
		config["bowtie2"]
	params:
		rulename="HLA_HD",
		batch	=config[config['host']]["job_hla_hd"],
		freq	=config["freq_data"],
		dict	=config["dictionary"],
		split	=config["gene_split"],
		sam	=config["samtools_new"],
		home     = WORK_DIR
	shell: """
	#######################
	module load hlahd/1.7.0.v1.0
	cd ${{LOCAL}}/
	gunzip -c {input.R[0]} > {wildcards.sample}_R1.fastq
	gunzip -c {input.R[1]} > {wildcards.sample}_R2.fastq
	hlahd.sh -t $SLURM_CPUS_PER_TASK -m 70 -f {params.freq} {wildcards.sample}_R1.fastq {wildcards.sample}_R2.fastq {params.split} {params.dict} {wildcards.sample} .
	mv {wildcards.sample}/result/{wildcards.sample}_final.result.txt {params.home}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLA-HD/
	#######################
	"""
############
##       MergeHLA Calls
#############
rule MergeHLA:
	input:
		A="{base}/{TIME}/{sample}/HLA/HLA-HD/{sample}_final.result.txt",
		B="{base}/{TIME}/{sample}/HLA/OptiType/{sample}_result.tsv",
		C=LOHHLA
	output:
		"{base}/{TIME}/{sample}/HLA/{sample}.Calls.txt"
	params:
		rulename= "MergeHLA",
		Tool	= NGS_PIPELINE + "/scripts/consensusHLA.py",
		LOHtool	= NGS_PIPELINE + "/scripts/consensusHLA_LOHHLA.py",
		batch	= config[config['host']]["job_default"],
		type	= lambda wildcards: config['sample_type'][wildcards.sample]
	shell: """
	#######################
	export LC_ALL=C
	if [ {params.type} == 'Normal' ]; then
		python3 {params.LOHtool} {input.B} {input.A} {input.C} {output}
	else
		python3 {params.Tool} {input.B} {input.A} {output}
	fi
	#######################
	"""
############
#	VEP4pVACSeq
############
rule VEP:
	input:
		"{base}/{TIME}/{sample}/calls/{sample}.strelka.indels.raw.vcf",
		"{base}/{TIME}/{sample}/calls/{sample}.strelka.snvs.raw.vcf",
		"{base}/{TIME}/{sample}/calls/{sample}.MuTect.raw.vcf",
		HLA  =lambda wildcards: HLA[wildcards.sample],
		tool =NGS_PIPELINE + "/scripts/consensusSomaticVCF.pl",
	output: 
		vcf	="{base}/{TIME}/{sample}/NeoAntigen/{sample}.final.vcf",
	params:
		rulename = "VEP",
		VEP	 = config['VEP'],
		merge=NGS_PIPELINE + "/scripts/consensusHLA.py",
		normal	 = lambda wildcards: config['sample_references'][wildcards.sample][0],
		batch    = config[config['host']]["job_VEP"],
	shell: """
	#######################
	module load vcftools 
	perl {input.tool} -vcf {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.strelka.indels.raw.vcf,{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.strelka.snvs.raw.vcf,{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.MuTect.raw.vcf -order {params.normal},{wildcards.sample} -filter REJECT |vcf-subset -u -c {wildcards.sample} >{output.vcf}.tmp
	module load VEP/{params.VEP}
	vep -i {output.vcf}.tmp --plugin Downstream --plugin Wildtype --terms SO --offline --cache --dir_cache $VEPCACHEDIR --assembly GRCh37 --output_file {output.vcf} --vcf --force_overwrite
	rm -rf {output.vcf}.tmp
	export LC_ALL=C
#	Removed aug 2023 bc this is a duplicate of mergeHLA rule:
#	python3 {params.merge} {input.HLA[0]} {input.HLA[1]} {wildcards.base}/{wildcards.TIME}/{params.normal}/HLA/{params.normal}.Calls.txt
	#######################
	"""
############
##       pVACSeq
#############
rule pVACseq:
	input:
		NORM_CALLS,
		vcf = "{base}/{TIME}/{sample}/NeoAntigen/{sample}.final.vcf"
	output:
		"{base}/{TIME}/{sample}/NeoAntigen/MHC_Class_I/{sample}.final.tsv"
	version: config['pvacseq']
	params:
		rulename = "pVACseq",
		python   = config["version_python"],
		normal   = lambda wildcards: config['sample_references'][wildcards.sample][0],
		tool 	 = NGS_PIPELINE + "/scripts/process_pVACSeq.pl",
		IEDB	 = config['IEDB'],
		batch    = config[config['host']]["job_VEP"],
		host	 = config['host']
	shell: """
	#######################
	allele=`cut -f1 {wildcards.base}/{wildcards.TIME}/{params.normal}/HLA/{params.normal}.Calls.txt |grep -v Allele|tr '\\n' ',' |sed -e 's/,$//g'`
	
	module load pvactools/{version} 
        pvacseq run --iedb-install-directory {params.IEDB} -e 8,9,10,11,12,13,14 -t ${{SLURM_CPUS_ON_NODE}} --fasta-size=50 {input.vcf} {wildcards.sample} ${{allele}} {{NNalign,NetMHC,NetMHCIIpan,NetMHCcons,NetMHCpan,PickPocket,SMM,SMMPMBEC,SMMalign}} {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen
	wait
	export LC_ALL=C
	sort {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/MHC_Class_I/{wildcards.sample}.filtered.tsv |uniq > {output}
	perl {params.tool} {output} |sort |uniq >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.final.txt
	#######################
	"""
############
##       LOHHLA
#############
rule LOHHLA:
	input:
		bam = lambda wildcards: somaticPairs[wildcards.sample],
		HD = lambda wildcards: HLA[wildcards.sample],
		seq = "{base}/{TIME}/{sample}/sequenza/{sample}/{sample}_alternative_solutions.txt",
		geneLevel = "{base}/{TIME}/{sample}/sequenza/{sample}_genelevel.txt"
	output:
		hla = '{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}_hla_input.txt',
		purity = '{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}_purityinput.txt',
		table = "{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}_hla_cn.txt",
		plot = "{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}.LOHHLA.pdf",
		notProc = "{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}_Alleles_not_processed.txt",
		status = '{base}/{TIME}/{sample}/HLA/LOHHLA/{sample}_LOHstatus.txt'
	version: config['lohhla']
	params:
		rulename 	= "LOHHLA",
		batch 		= config[config['host']]["job_lohhla"],
		create   	= NGS_PIPELINE + "/scripts/" + config['lohhla_create'],
                create2         = NGS_PIPELINE + "/scripts/" + config['lohhla_create2'],
		alleles		= config['lohhla_alleles'],
		home		= WORK_DIR,
		lohhla 		= NGS_PIPELINE + "/scripts/" + config['lohhla_script'],
        	rScript 	= NGS_PIPELINE + "/scripts/" + config['lohhla_rScript'],
        	hlafasta 	= config['lohhla_hlafasta'],
        	hladat 		= config['lohhla_hladat'],
        	coordinateFile 	= config['lohhla_coordinateFile'],
		tableGenScript	= NGS_PIPELINE + "/scripts/" + config['lohhla_tableGenScript'],
		getStatus	= NGS_PIPELINE + "/scripts/" + config['lohhla_getStatus'],
        	samtools 	= config['samtools_LOHHLA'],
        	GATK 		= config['GATK_LOHHLA'],
        	novo 		= config['novo'],
        	R 		= config['version_R_LOHHLA'],
        	bedT 		= config['bedtools_LOHHLA'],
        	jelly 		= config['jellyfish'],
		Tbam            = lambda wildcards: somaticPairs[wildcards.sample][0].split('/')[-1].replace('.bwa.final.bam','_recal.bam'),
		Nbam		= lambda wildcards: somaticPairs[wildcards.sample][2].split('/')[-1].replace('.bwa.final.bam','_recal.bam'),
		rLib		= config['lohhla_rLibs']
	shell: """
	#######################
	cd ${{LOCAL}}/
	#set +u
	#source myconda
	#conda activate LOHHLA_new
	#set -u
	#
	mkdir -p {WORK_DIR}/{wildcards.base}/{TIME}/{wildcards.sample}/HLA/LOHHLA/
	python3 {params.create} {TIME} {WORK_DIR}/{input.bam[0]} {WORK_DIR}/{input.bam[2]} {WORK_DIR}/{input.HD[1]} {WORK_DIR}/{input.seq} ${{LOCAL}}
	python3 {params.create2} {wildcards.sample} {params.alleles} {WORK_DIR}/{output.hla} {WORK_DIR}/{output.purity} 
	module load samtools/{params.samtools} GATK/{params.GATK} novocraft/{params.novo} R/{params.R} bedtools/{params.bedT} jellyfish/{params.jelly}
	python {params.lohhla} ${{LOCAL}}/{params.Tbam} ${{LOCAL}}/{params.Nbam} {WORK_DIR}/{output.purity} {WORK_DIR}/{output.hla} {TIME} {WORK_DIR}/{wildcards.base}/{TIME}/{wildcards.sample}/HLA/LOHHLA/ {wildcards.sample} {params.rScript} {params.hlafasta} {params.hladat} {params.coordinateFile} {params.tableGenScript} {WORK_DIR}/{output.table} {WORK_DIR}/{output.plot} {WORK_DIR}/{output.notProc} {params.rLib} &&
	chmod -R 770 {WORK_DIR}/{output.table} {WORK_DIR}/{output.plot}
	chgrp -R Compass {WORK_DIR}/{output.table} {WORK_DIR}/{output.plot}
	python3 {params.getStatus} {WORK_DIR}/{output.table} {WORK_DIR}/{input.geneLevel} {WORK_DIR}/{input.seq} > {WORK_DIR}/{output.status}
	#######################
	"""
