
if 'RNASeq' in config:
	#The subjects in this list have at least one transcriptome library. 
	for subject in SUB_RNASEQ: 
		#All the transcriptome libraries for the subject are in this list.		
		for sample in SAM_RNASEQ[subject]: 
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/STAR-fusion.txt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/RSEM/"+sample+".rsem.genes.results"]
		


# STAR alignment to hg19 reference using GENCODE annotation

rule STAR:
	input:	R=lambda wildcards: FQ[wildcards.sample]
	output:
		temp("{subject}/{TIME}/{sample}/{sample}.star.bam"),
		temp("{subject}/{TIME}/{sample}/{sample}.star.bam.bai"),
		"{subject}/{TIME}/{sample}/{sample}Chimeric.out.junction",
		temp("{subject}/{TIME}/{sample}/{sample}.transcriptome.bam"),
	version:
		config["STAR"]
	params:
		rulename = "STAR",
		samtools = config['samtools'],
		batch    = config[config['host']]['job_STAR_TPM'],
		star_gencode_ref  = config['star_2.7.0f_gencode'],
		home     = WORK_DIR,
		picard   = config['picard']
	shell: """
	
        module load STAR/{version}
	cd ${{LOCAL}}/
	
	STAR --genomeDir {params.star_gencode_ref} \
             --readFilesIn {input.R[0]} {input.R[1]} \
             --readFilesCommand zcat \
             --outFileNamePrefix {wildcards.sample} \
             --runThreadN $SLURM_CPUS_PER_TASK \
             --twopassMode Basic \
             --outSAMunmapped Within \
             --chimSegmentMin 12 \
             --chimJunctionOverhangMin 12 \
             --alignSJDBoverhangMin 10 \
             --alignMatesGapMax 100000 \
             --alignIntronMax 100000 \
             --chimSegmentReadGapMax 3 \
             --alignSJstitchMismatchNmax 5 -1 5 5 \
             --outSAMstrandField intronMotif \
             --chimMultimapScoreRange 10 \
             --chimMultimapNmax 10 \
             --chimNonchimScoreDropMin 10 \
             --peOverlapNbasesMin 12 \
             --peOverlapMMp 0.1 \
             --chimOutJunctionFormat 1 \
             --outFilterMismatchNmax 2 \
             --outSAMtype BAM SortedByCoordinate \
             --outSAMmapqUnique 60 \
             --quantMode TranscriptomeSAM

	echo "STAR mapping completed"
	mv -f {wildcards.sample}Chimeric.out.junction {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}Chimeric.out.junction
	mv -f {wildcards.sample}Aligned.toTranscriptome.out.bam {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.transcriptome.bam
	module load picard/{params.picard}
	java -Xmx${{MEM}}g -Djava.io.tmpdir=${{LOCAL}} -jar $PICARD_JAR AddOrReplaceReadGroups VALIDATION_STRINGENCY=SILENT INPUT={wildcards.sample}Aligned.sortedByCoord.out.bam OUTPUT={params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star.bam SORT_ORDER=coordinate RGLB={wildcards.sample} RGPU={wildcards.sample} RGPL=ILLUMINA RGSM={wildcards.sample} RGCN=Compass
	module load samtools/{params.samtools}
	samtools index {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star.bam

	"""

# STAR_Fusion

rule STAR_Fusion:
	input:
		Junction="{subject}/{TIME}/{sample}/{sample}Chimeric.out.junction",
	output:
		"{subject}/{TIME}/{sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv",
		"{subject}/{TIME}/{sample}/fusion/STAR-fusion.txt",
	version: config["STAR-Fusion"],
	params:
		rulename   = "STAR_Fusion",
		samtools   = config['samtools'],
		batch	   = config[config['host']]['job_STAR_TPM'],
		ctat_lib   = config['STAR_Fusion_CTAT_lib'],
		STAR	   = config["STAR"],
		home	   = WORK_DIR,
	shell: """
	
        module load STAR-Fusion/{version}
	module load samtools/{params.samtools}
	module load perl
	module load STAR/{params.STAR}
	if [ -d "{params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results" ]; then rm -Rf {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results; fi
	STAR-Fusion --genome_lib_dir {params.ctat_lib} -J {params.home}/{input.Junction} --CPU ${{THREADS}} --output_dir {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results
	cp {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/fusion/STAR-fusion.txt
	# remove intermediate files
	rm -rf {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.preliminary
	
	"""

# RSEM

rule RSEM:
	input:
		bam="{subject}/{TIME}/{sample}/{sample}.transcriptome.bam",
	output:
		"{subject}/{TIME}/{sample}/RSEM/{sample}.rsem.genes.results",
		"{subject}/{TIME}/{sample}/RSEM/{sample}.rsem.isoforms.results",
	version: config["rsem"],
	params:
		rulename = "RSEM",
		ref      = config['rsem_1.3.2_gencode'],
		batch    = config[config['host']]['job_STAR'],
		home     = WORK_DIR,
	shell: """
	
	module load rsem/{version}
	cd ${{LOCAL}}/
#	rsem-calculate-expression --no-bam-output --paired-end -p ${{THREADS}}  --estimate-rspd  --bam {params.home}/{input.bam} {params.ref} {wildcards.sample}_ENS
	rsem-calculate-expression --no-bam-output --append-names --estimate-rspd  --alignments --paired-end {params.home}/{input.bam} {params.ref} {wildcards.sample}
	echo "gene and transcript level counts generated"
	mkdir -p {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM
	mv -f {wildcards.sample}.genes.results {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM/{wildcards.sample}.rsem.genes.results
	mv -f {wildcards.sample}.isoforms.results {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM/{wildcards.sample}.rsem.isoforms.results

	"""

##Manipulate rsem output to display gene names in first column. 
