# coding: utf-8
SequenzaPairs ={}
if 'sample_references' in config:
	if len(config['sample_references']) > 0:
		for Tumor in config['sample_references']:
			for Normal in config['sample_references'][Tumor]:
				if config['sample_captures'][Tumor] not in config['Panel_List']:
					SequenzaPairs[Tumor] = ["{subject}/{TIME}/{sample}/{sample}.bwa.final.bam".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal), "{subject}/{TIME}/{sample}/{sample}.bwa.final.bam".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Tumor], sample=Tumor) ]
	for sample in config['sample_references'].keys():
		subject=SAMPLE_TO_SUBJECT[sample]
		if config['sample_captures'][sample] not in config['Panel_List']:
			TARGET +=[subject+"/"+TIME+"/"+sample+"/sequenza/"+sample+"/"+sample+"_segments.txt"]	
			TARGET +=[subject+"/"+TIME+"/"+sample+"/sequenza/"+sample+".txt"]

############
#       Sequenza
############
# Rscript outputs many files into output directory
rule Sequenza:
	input:
		files=lambda wildcards: SequenzaPairs[wildcards.Tumor],
		gc_ref=config["annovar_data"]+config["gc50Base"],
		RCode=NGS_PIPELINE+ "/scripts/run_sequenza_pipeline.R",
		ref=config["reference"]
	output:
		"{subject}/{TIME}/{Tumor}/sequenza/{Tumor}/{Tumor}_segments.txt"
	version: config['sequenza-utils']
	params:
		rulename = "Sequenza",
		R	 = config["version_R"],
		samtools    = config['samtools_new'],
		batch    = config[config['host']]['job_Sequenza'],
		home     = WORK_DIR,
		all      = "{Tumor}.seqz.gz",
		bin      = "{Tumor}.seqz_small.gz"
	shell: """
	#######################
	module load sequenza-utils/{version}
	module load samtools/{params.samtools}
	sequenza-utils bam2seqz -gc {input.gc_ref} -n {input.files[0]} -t {input.files[1]} --fasta {input.ref} -o ${{LOCAL}}/{params.all}
	sequenza-utils seqz_binning -w 50 -s ${{LOCAL}}/{params.all} -o ${{LOCAL}}/{params.bin}
	module load R/{params.R}
	cd ${{LOCAL}}
	{input.RCode} --sample {wildcards.Tumor}
	cp -r ${{LOCAL}}/{wildcards.Tumor} {params.home}/{wildcards.subject}/{wildcards.TIME}/{wildcards.Tumor}/sequenza/
	#######################
	"""

rule Sequenza_geneAnnot:
	input:
		file="{subject}/{TIME}/{Tumor}/sequenza/{Tumor}/{Tumor}_segments.txt",
		interval=lambda wildcards: config['target_intervals'][config['sample_captures'][wildcards.Tumor]],
		convertor=NGS_PIPELINE+"/scripts/GeneAnnotation.v1.pl",
		geneList=config["annovar_data"]+config["geneList"]
	output:
		"{subject}/{TIME}/{Tumor}/sequenza/{Tumor}.txt"
	version: config["bedtools"]
	params:
		rulename = "Sequenza_geneAnnot",
		batch    = config[config['host']]['job_Sequenza']
	shell: """
	#######################
	set +eo pipefail
        module load bedtools/{version}
        sed -e 's/"//g' {input.file} |sed -e 's/chromosome/#chromosome/' | bedtools intersect  -wa -a {input.interval} -b - |grep -v NOTFOUND |sed -e 's/___/\\t/g'| cut -f 1-4| bedtools expand -c 4 >{output}.temp
        sed -e 's/"//g' {input.file} |sed -e 's/chromosome/#chromosome/' |head -1 >{output}.temp1
        sed -i 's/end.pos\\tBf/end.pos\\tGene\\tBf/g' {output}.temp1
        sed -e 's/"//g' {input.file} |sed -e 's/chromosome/#chromosome/' |intersectBed -a {output}.temp -b - -wb |cut -f 1-4,8-100 >>{output}.temp1
        perl {input.convertor} {input.geneList} {output}.temp1 3 >{output}
        rm -rf {output}.temp {output}.temp1	
	#######################
	"""
