# coding: utf-8
TARGET_TCR = []

if 'RNASeq' in config:
    for subject in config['RNASeq'].keys():
        for sample in config['RNASeq'][subject]:
            if config['sample_captures'][sample] not in config['exclude_from_rnaseq']: 
                TARGET_R += [subject+"/"+TIME+"/"+sample+"/mixcr/"+sample+".clonotypes.ALL.txt"]
                TARGET_R += [subject+"/"+TIME+"/"+sample+"/mixcr/"+"convert."+sample+".clonotypes.ALL.txt"]
		TARGET_R += [subject+"/"+TIME+"/"+sample+"/mixcr/"+sample+".summarystats.ALL.txt"]
            else:
                TARGET_TCR += [subject+"/"+TIME+"/"+sample+"/mixcr/"+sample+".clones.TCR.txt"]
                TARGET_TCR += [subject+"/"+TIME+"/"+sample+"/mixcr/"+"convert."+sample+".clones.TCR.txt"]
                TARGET_TCR += [subject+"/"+TIME+"/"+sample+"/mixcr/"+sample+".summarystats.TCR.txt"]
rule mixcr_RNASeq:
    input:
        R=lambda wildcards: FQ[wildcards.sample]
    output:
        mixcr="{base}/{TIME}/{sample}/mixcr/{sample}.clonotypes.ALL.txt",
        vdjtools="{base}/{TIME}/{sample}/mixcr/convert.{sample}.clonotypes.ALL.txt",
        summary="{base}/{TIME}/{sample}/mixcr/{sample}.summarystats.ALL.txt"
    version: 
        config['mixcr']
    params:
        rulename = "mixcr_RNASeq",
        batch    = config[config['host']]['job_mixcr'],
	vdjtools = config['vdjtools']
    shell: """
    #######################
    if [ -d "{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr" ]; then rm -f {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr/*; fi
    cd {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr/

    /data/Compass/dev/valdezkm/software/mixcr/3.0.13/mixcr analyze shotgun -t ${{THREADS}} --report {wildcards.sample}.alignment.log --species hs --starting-material rna --only-productive {input.R[0]} {input.R[1]} {wildcards.sample}

    module load vdjtools/{params.vdjtools}
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.ALL.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.TRA.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.TRB.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.TRG.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.TRD.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.IGH.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.IGK.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clonotypes.IGL.txt convert

    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.ALL.txt {wildcards.sample}.ALL
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.TRA.txt {wildcards.sample}.TRA
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.TRB.txt {wildcards.sample}.TRB
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.TRG.txt {wildcards.sample}.TRG
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.TRD.txt {wildcards.sample}.TRD
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.IGH.txt {wildcards.sample}.IGH
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.IGK.txt {wildcards.sample}.IGK
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clonotypes.IGL.txt {wildcards.sample}.IGL

    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.ALL.txt {wildcards.sample}.ALL
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.TRA.txt {wildcards.sample}.TRA
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.TRB.txt {wildcards.sample}.TRB
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.TRG.txt {wildcards.sample}.TRG
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.TRD.txt {wildcards.sample}.TRD
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.IGH.txt {wildcards.sample}.IGH
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.IGK.txt {wildcards.sample}.IGK
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clonotypes.IGL.txt {wildcards.sample}.IGL

    head -n1 {wildcards.sample}.ALL.basicstats.txt > {wildcards.sample}.summarystats.ALL.txt
    cat {wildcards.sample}.TRA.basicstats.txt {wildcards.sample}.TRB.basicstats.txt {wildcards.sample}.TRG.basicstats.txt {wildcards.sample}.TRD.basicstats.txt {wildcards.sample}.IGH.basicstats.txt {wildcards.sample}.IGK.basicstats.txt {wildcards.sample}.IGL.basicstats.txt | grep -v sample_id >> {wildcards.sample}.summarystats.ALL.txt


    #######################
    """

rule mixcr_TCRSeq:
    input:
        R=lambda wildcards: FQ[wildcards.sample]
    output:
        mixcr="{base}/{TIME}/{sample}/mixcr/{sample}.clones.TCR.txt",
        vdjtools="{base}/{TIME}/{sample}/mixcr/convert.{sample}.clones.TCR.txt",
        summary="{base}/{TIME}/{sample}/mixcr/{sample}.summarystats.TCR.txt"
    version: 
        config['mixcr']
    params:
        rulename = "mixcr_TCRSeq",
        java     = config['java8_11'],
        R        = config['version_R'],
        batch    = config[config['host']]['job_mixcr']
    shell: """
    #######################
    module load java/{params.java}
    module load mixcr/{version}

    if [ -d "{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr" ]; then rm -f {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr/*; fi
    cd {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/mixcr/

    mixcr align -t ${{THREADS}} -s hs -OvParameters.geneFeatureToAlign=VTranscript --report {wildcards.sample}.alignment.log {input.R[0]} {input.R[1]} {wildcards.sample}.aln.vdjca

    mixcr assemble -t ${{THREADS}} {wildcards.sample}.aln.vdjca {wildcards.sample}.clones.clns

    mixcr exportClones {wildcards.sample}.clones.clns {wildcards.sample}.clones.TCR.txt
    
    mixcr exportClones -c TRA {wildcards.sample}.clones.clns {wildcards.sample}.clones.TRA.txt

    mixcr exportClones -c TRB {wildcards.sample}.clones.clns {wildcards.sample}.clones.TRB.txt

    module load vdjtools/1.1.10
    module load R/{params.R}
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clones.TCR.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clones.TRA.txt convert
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR Convert -S mixcr {wildcards.sample}.clones.TRB.txt convert

    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clones.TCR.txt {wildcards.sample}.TCR
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clones.TRA.txt {wildcards.sample}.TRA
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR CalcBasicStats convert.{wildcards.sample}.clones.TRB.txt {wildcards.sample}.TRB

    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clones.TCR.txt {wildcards.sample}.TCR
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clones.TRA.txt {wildcards.sample}.TRA
    java -Djava.io.tmpdir=${{LOCAL}} -jar $VDJ_JAR PlotFancyVJUsage convert.{wildcards.sample}.clones.TRB.txt {wildcards.sample}.TRB

    head -n1 {wildcards.sample}.TCR.basicstats.txt > {wildcards.sample}.summarystats.TCR.txt
    cat {wildcards.sample}.TRA.basicstats.txt {wildcards.sample}.TRB.basicstats.txt | grep -v sample_id >> {wildcards.sample}.summarystats.TCR.txt

    #######################
    """

