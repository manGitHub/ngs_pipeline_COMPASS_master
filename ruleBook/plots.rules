# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
TARGET     += expand("{subject}/{TIME}/qc/{subject}.coveragePlot.png",TIME=TIME, subject=PATIENTS)
TARGET     += expand("{subject}/{TIME}/qc/{subject}.hotspot_coverage.png", TIME=TIME, subject=PATIENTS)
if 'subject' in config:
	for subject in config['subject']:
		for library in config['subject'][subject]:
			if config['sample_captures'][library] not in config['Panel_List']:
				# any output which is desired on all libraries but Panel goes here, the list of panel captures should be maintained in the Panel_List in config file
				TARGET    += [subject+"/"+TIME+"/qc/"+subject+".circos.png"]

LOH_Circos = {}
for subject in config['subject'].keys():
    LOH_files = []
    for s in config['subject'][subject]:
        if config['sample_captures'][s] not in config['Panel_List']:
            LOH_files.append(s)
    LOH_Circos[subject] = ["{subject}/{TIME}/{sample}/qc/{sample}.bwa.loh".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[s], sample=lib) for lib in LOH_files]

if 'RNASeq' in config:
    for subject in config['RNASeq'].keys():
        #if statement checks if a DNA library exists for this subject. That implies the LOH_Circos data structure already exists.
        if subject in config['subject'].keys():
            LOH_Circos[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.loh".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
        else:
            LOH_Circos[subject] = []
            LOH_Circos[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.loh".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]


############
# CoveragePlot
############
rule CoveragePlot:
	input:
		covFiles=lambda wildcards: SUB_COV[wildcards.subject],
		coverage =NGS_PIPELINE + "/scripts/coverage.R"
	output: "{subject}/{TIME}/qc/{subject}.coveragePlot.png",
	version: config["version_R"]
	params:
		rulename = "CoveragePlot",
		batch    = config[config['host']]["job_covplot"]
	shell: """
	#######################

	cp -f {input.covFiles} ${{LOCAL}}

	module load R/{version}
	R --vanilla --slave --silent --args ${{LOCAL}} {output} {wildcards.subject} <{input.coverage}
	#######################
	"""
############
# Circos Plot
############
rule Circos:
	input:
		lohFiles=lambda wildcards: LOH_Circos[wildcards.subject],
		circos =NGS_PIPELINE + "/scripts/circos.R"
	output:
		"{subject}/{TIME}/qc/{subject}.circos.png",
	version: config["version_R"]
	params:
		rulename = "Circos",
		batch    = config[config['host']]["job_covplot"]
	shell: """
	#######################
	cp -f {input.lohFiles} ${{LOCAL}}
	module load R/{version}
	R --vanilla --slave --silent --args ${{LOCAL}} {output} {wildcards.subject} <{input.circos}
	#######################
	"""
############
# Box Plot Hotspot
############
rule BoxPlot_Hotspot:
	input:
		covFiles=lambda wildcards: SUB_HOT[wildcards.subject],
		boxplot =NGS_PIPELINE + "/scripts/boxplot.R"
	output:
		"{subject}/{TIME}/qc/{subject}.hotspot_coverage.png",
	version: config["version_R"]
	params:
		rulename = "Boxplot_Hotspot",
		batch    = config[config['host']]["job_covplot"]
	shell: """
	#######################
	cp -f {input.covFiles} ${{LOCAL}}
	module load R/{version}
	R --vanilla --slave --silent --args ${{LOCAL}} {output} {wildcards.subject} <{input.boxplot}
	#######################
	"""
