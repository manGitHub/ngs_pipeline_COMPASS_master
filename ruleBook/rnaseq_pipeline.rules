RNA_QC_ALL =[]
TARGET_R=[]
SUB2RNA = {}
SUB_RNASEQ=set()
SUB_FUSION={}
SUB_QC={}
SAM_RNASEQ={}

if 'RNASeq' in config:
	for subject,samples in config['RNASeq'].items():
#		SUB_RNASEQ.append(subject)
		SAM_RNASEQ[subject] = []
		for sample in samples:
			if config['sample_captures'][sample] not in config['exclude_from_rnaseq']:
				SUB2RNA[sample]=subject
				
				##Gather all the transcriptome libraries for the subject
				SAM_RNASEQ[subject] += [sample]

				
				##This subject has atleast one transcriptome library. The variable is defined as a set. Adding duplicate elements to 
				##a set has no effect.	
				SUB_RNASEQ.add(subject)

	for subject in SUB_RNASEQ:
		#RNA_QC_ALL +=[subject+"/"+TIME+"/qc/"+subject+".RnaSeqQC.txt"]
		TARGET_R   +=[subject+"/"+TIME+"/"+subject+"/db/"+subject+".rnaseq"]
		TARGET_R   +=[subject+"/"+TIME+ACT_DIR+subject+".fusion.actionable.txt"]
		TARGET_R   +=[subject+"/"+TIME+"/"+subject+"/db/"+subject+".fusion.txt"]
		TARGET_R   +=[subject+"/"+TIME+ACT_DIR+subject+".rnaseq.actionable.txt"]
                #TARGET_R   +=[subject+"/"+TIME+"/qc/"+subject+".RnaSeqQC.txt"]
		TARGET_R   +=[subject+"/"+TIME+"/qc/"+subject+".transcriptCoverage.png"]
		for sample in SAM_RNASEQ[subject]:
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/"+sample+".star.final.bam"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/"+sample+".tophat.final.bam"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/tophat-fusion.txt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/fusion-catcher.txt"]
			# silence Defuse rule 05/11/2018
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/defuse.filtered.txt"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/STAR-fusion.txt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/fastqc/"+sample+"_R2_fastqc.html"]
			TARGET_R += [subject+"/"+TIME+"/qc/"+subject+".circos.png"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".star.flagstat.txt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".star.hotspot.depth"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".RnaSeqMetrics.txt"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".RnaSeqMetrics.pdf"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".RnaSeqQC.txt"]
                        
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+"rnaseqc/"+"report.html"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/qc/"+sample+".star.gt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/fusion/"+sample+".actionable.fusion.txt"]
			TARGET_R += [subject+"/"+TIME+"/"+sample+"/calls/"+sample+".HC_RNASeq.annotated.txt"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/"+sample+".UCSC_transcriptome.bam"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/"+sample+".ENS_transcriptome.bam"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/RSEM_UCSC/"+sample+".rsem_UCSC.genes.results"]
			#TARGET_R += [subject+"/"+TIME+"/"+sample+"/RSEM_ENS/"+sample+".rsem_ENS.genes.results"]
			add_to_SUBJECT_ANNO(subject, "rnaseq", [subject+"/"+TIME+"/"+sample+"/calls/"+sample+".HC_RNASeq.annotated.txt"])
			#for gtf in config['GTF']:
			#	TARGET_R += [subject+"/"+TIME+"/"+sample+"/TPM_"+gtf+"/"+sample+".transcript.TPM.txt"]
			#	TARGET_R += [subject+"/"+TIME+"/"+sample+"/TPM_"+gtf+"/"+sample+".gene.TPM.txt"]
			#	TARGET_R += [subject+"/"+TIME+"/"+sample+"/TPM_"+gtf+"/"+sample+".exon.TPM.txt"]
		TARGET_R  += ["{subject}/{TIME}/{sample}/calls/{sample}.HC_RNASeq.raw.vcf".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		SUB_FUSION[subject] = ["{subject}/{TIME}/{sample}/fusion/{sample}.actionable.fusion.txt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		SUB_QC[subject]     = ["{subject}/{TIME}/{sample}/qc/{sample}.RnaSeqMetrics.txt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		if subject in SUBJECT_VCFS:
			SUBJECT_VCFS[subject] += ["{subject}/{TIME}/{sample}/calls/{sample}.HC_RNASeq.snpEff.txt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		else:
			SUBJECT_VCFS[subject] = []
			SUBJECT_VCFS[subject] += ["{subject}/{TIME}/{sample}/calls/{sample}.HC_RNASeq.snpEff.txt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		if subject in SUB_HOT:
			SUB_HOT[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.hotspot.depth".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_LOH[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.loh".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_COV[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.coverage.txt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_GT[subject]  += ["{subject}/{TIME}/{sample}/qc/{sample}.star.gt".format(TIME=TIME,subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
		else:
			SUB_HOT[subject] = []
			SUB_LOH[subject] = []
			SUB_COV[subject] = []
			SUB_GT[subject]  = []
			SUB_HOT[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.hotspot.depth".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_LOH[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.loh".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_COV[subject] += ["{subject}/{TIME}/{sample}/qc/{sample}.star.coverage.txt".format(TIME=TIME,subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]
			SUB_GT[subject]  += ["{subject}/{TIME}/{sample}/qc/{sample}.star.gt".format(TIME=TIME, subject=SUB2RNA[s], sample=s) for s in SAM_RNASEQ[subject]]


############
include: NGS_PIPELINE +"/ruleBook/mixcr.rules"
include: NGS_PIPELINE +"/ruleBook/STAR.rules"
#include: NGS_PIPELINE +"/ruleBook/tophat.rules"
include: NGS_PIPELINE +"/ruleBook/arriba.rules"
#include: NGS_PIPELINE +"/ruleBook/star_seqr.rules"

############
#       RNASeq All
############
rule RNASeq:
	input:
		TARGET_R, TARGET_TCR
	output:
		expand("ngs_pipeline_{SAMPLESHEET}_{NOW}.rnaseq.done", NOW=NOW, SAMPLESHEET=SAMPLESHEET)
	wildcard_constraints:
                NOW="\w+"	
	params:
		rulename  = "RNASeq_final",
		batch     = config[config['host']]["job_default"]

	shell: """
	#######################
	touch {output}
	#######################
	"""
############
#       Fusioncatcher
############
rule FUSION_CATCHER:
	input:
		R=lambda wildcards: FQ[wildcards.sample],
	output:
		"{base}/{TIME}/{sample}/fusion/fusion-catcher.txt",
		"{base}/{TIME}/{sample}/fusion/fusion-catcher_summary_candidate_fusions.txt"
	version: config['fusioncatcher']
	params:
		rulename = "FUSION_CATCHER",
		batch    = config[config['host']]['job_fusioncatch'],
	shell: """
	#######################
	module load fusioncatcher/{version}
	fusioncatcher -p ${{THREADS}} -i {input.R[0]},{input.R[1]} -o ${{LOCAL}}/

	cp ${{LOCAL}}/final-list_candidate-fusion-genes.hg19.txt {wildcards.base}/{TIME}/{wildcards.sample}/fusion/fusion-catcher.txt
	cp ${{LOCAL}}/summary_candidate_fusions.txt {wildcards.base}/{TIME}/{wildcards.sample}/fusion/fusion-catcher_summary_candidate_fusions.txt
	#######################
	"""
############
# RNASeq Hapcaller
############
rule HapCall_RNASeq:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.star.final.bam",
		bai="{base}/{TIME}/{sample}/{sample}.star.final.bam.bai",
		ref=config["reference"],
		dbsnp=config["dbsnp"]
	output:
		vcf="{base}/{TIME}/{sample}/calls/{sample}.HC_RNASeq.raw.vcf"
	version: config["GATK"]
	params:
		rulename = "HapCall_RNASeq",
		batch    = config[config['host']]["job_gatk_RNA"]
	shell: """
	#######################
	module load GATK/{version}
	java -Xmx${{MEM}}g -Djava.io.tmpdir=${{LOCAL}} -jar $GATK_JAR -T HaplotypeCaller -R {input.ref} -I {input.bam} -o ${{LOCAL}}/{wildcards.sample}.vcf --dbsnp {input.dbsnp} -dontUseSoftClippedBases -stand_call_conf 30 
	java -Xmx${{MEM}}g -Djava.io.tmpdir=${{LOCAL}} -jar $GATK_JAR -T VariantFiltration -R {input.ref} -V ${{LOCAL}}/{wildcards.sample}.vcf -window 35 -cluster 3 --filterExpression "FS > 30.0 || QD < 2.0" -filterName "RNASeqFilters_FS_QD" -o {output.vcf}
	#######################
	"""
############
# Coverage
############
rule CoveragE:
	input:
		bam="{subject}/{TIME}/{sample}/{sample}.star.final.bam",
		bai="{subject}/{TIME}/{sample}/{sample}.star.final.bam.bai",
		interval=lambda wildcards: config['target_intervals'][config['sample_captures'][wildcards.sample]]
	output:
		"{subject}/{TIME}/{sample}/qc/{sample}.star.coverage.txt"
	version: config["bedtools"]
	params:
		rulename = "CoveragE",
		batch    = config[config['host']]["job_bedtools"]
	shell: """
	#######################
	module load bedtools/{version}
	bedtools coverage -abam {input.bam} -b {input.interval} -hist |grep "^all" > {output}
	#######################
	"""
############
# Filter fusion for every library
############
rule Sub_Fusion:
	input:
#		tophat="{subject}/{TIME}/{sample}/fusion/tophat-fusion.txt",
		fc="{subject}/{TIME}/{sample}/fusion/fusion-catcher.txt",
		#defuse="{subject}/{TIME}/{sample}/fusion/defuse.filtered.txt",
		SF="{subject}/{TIME}/{sample}/fusion/STAR-fusion.txt",
		arriba="{subject}/{TIME}/{sample}/fusion/arriba-fusion.txt",
#		starseqr="{subject}/{TIME}/{sample}/fusion/starseqr-fusion.txt",
		convertor = NGS_PIPELINE + "/scripts/" + config['Actionable_fusion'],
	output:
		"{subject}/{TIME}/{sample}/fusion/{sample}.actionable.fusion.txt"
	params:
		rulename = "Sub_Fusion",
		batch    = config[config['host']]["job_default"]
	shell: """
	#######################
	mkdir -p {wildcards.subject}/{TIME}/Actionable
	perl {input.convertor} {wildcards.sample} {input.fc} {input.SF} {input.arriba} {wildcards.subject}/{TIME}{ACT_DIR} |awk 'NR<2{{print $0;next}}{{print $0| "sort "}}' >{output}
	#######################
	"""
############
# Combine filtered fusions to actionable.
############
rule Actionable_fusion:
	input:
		fusion=lambda wildcards: SUB_FUSION[wildcards.subject]
	output:
		"{subject}/{TIME}/{ACT_DIR}{subject}.fusion.actionable.txt"
	params:
		rulename = "Actionable_fusion",
		batch    = config[config['host']]["job_default"]
	shell: """
	#######################
	cat {input.fusion} |sort |uniq >{output}.tmp
	grep "LeftGene" {output}.tmp >{output}
	grep -v "LeftGene" {output}.tmp >>{output}
	
	rm -rf {output}.tmp
	#######################
	"""

############
# Annotate fusions with singularity image
############
rule fusion_annotation:
	input: 	 
		"{subject}/{TIME}/Actionable/{subject}.fusion.actionable.txt"
	output:	 
		"{subject}/{TIME}/{subject}/db/{subject}.fusion.txt"
	version: config["singularity"]
	params:
		rulename        = "fusion_annotation",
		work_dir        = WORK_DIR,
		image           = config["fusion_image"],
		pfam            = config["fusion_pfamDB"],
		fasta           = config["fusion_fasta"],
		gencode_version = "36",
		FusionPlot      = config["FusionPlot"],
		batch           = config[config["host"]]["job_annot"] 
	shell: """
	#######################
	module load singularity/{version}
	singularity exec --bind {params.work_dir},{params.FusionPlot} {params.image} processFusionCase.sh \
		-d {params.work_dir} \
		-p {wildcards.subject} \
		-c {TIME} \
		-f {params.pfam} \
		-g {params.fasta} \
		-v {params.gencode_version}
	#######################
	"""
