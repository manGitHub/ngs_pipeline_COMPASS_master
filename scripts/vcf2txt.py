# To replace vcf2txt.pl
# Written by Rob Schultz 10/23





import os
import subprocess
import sys
import path
import re

#####################################################
# Version: v0.1
# This tool converts the vcf files generated by MuTect/Platypus/Strelka/HaplotypeCaller/UnifiedGenotyper to a human readable as well as annovar comfertable input file.
# This is dependent on annovar's provided convertor: "/usr/local/apps/ANNOVAR/current/convert2annovar.pl"
# How to run:
#     PATH=/data/Compass/local/software/annovar/2018-04-16:$PATH
#     ANNOVAR_HOME=/data/Compass/local/software/annovar/2018-04-16
#     ANNOVAR_DATA=/fdb/annovar/current
#     ANNOVAR_DATA_CURRENT=/fdb/annovar/current
#     python vcf2txt.py path/to/vcf path/to/temp/dir > path/to/output/vcf
#####################################################
def isDefinedGlobally(var1):
    try:
        return f'{var1=}'.split('=')[1].replace("'","") in globals()
    except:
        return False

def isDefinedLocally(var1):
    try:
        return f'{var1=}'.split('=')[0] in locals()
    except:
        return False

#def isDefinedLocally(var1):
#    try:
#        var1
#        return True
#    except:
#        return False


def VARSCAN_S(format1,sample1):
    format1 = format1.split(':')
    if sample1 == './.':
        return ['0','0','0','0','0']
    sample1 = sample1.split(':')
    vaf = '0'
    idx_GT = format1.index('GT')
    idx_DP = format1.index('DP')
    idx_RD = format1.index('RD')
    idx_AD = format1.index('AD')
    idx_FREQ = format1.index('FREQ')
    sample1[idx_FREQ] = sample1[idx_FREQ].replace('%','')
    return [sample[idx_GT],sample[idx_DP],sample[idx_RD], sample[idx_AD], sample[idx_FREQ]]

def GATK(format1, sample1):
    format1 = format1.split(':')
    if sample1 == './.':
        return ['0','0','0','0','0']
    sample1 = sample1.split(':')
    vaf = '0'
    idx_GT = format1.index('GT')
    idx_DP = format1.index('DP')
    idx_AD = format1.index('AD')
    if isDefinedLocally('idx_GT') and isDefinedLocally('idx_AD') and isDefinedLocally('idx_DP'):
        ad = sample1[idx_AD].split(',')
        #if len(ad) == 2 and (True if isinstance(ad[1],str) else ad[1] < 1) and sample1[idx_DP] >= 1:
        if len(ad) == 2 and int(ad[1]) < 1 and int(sample1[idx_DP]) >= 1:
            return[sample1[idx_GT], sample1[idx_DP], ad[0], ad[1], vaf]
        #elif len(ad) == 2 and (False if isinstance(ad[1],str) else ad[1] >= 1) and sample1[idx_DP] >= 1:
        elif len(ad) == 2 and int(ad[1]) >= 1 and int(sample1[idx_DP]) >= 1:
            vaf = '%.2f' % (round(int(ad[1])/int(sample1[idx_DP]),2))
            return [sample1[idx_GT], sample1[idx_DP], ad[0], ad[1], vaf]
        else:
            return [sample1[idx_GT], sample1[idx_DP], sample1[idx_AD], sample1[idx_AD], vaf]
    else:
        return [sample1, 'NA', 'NA', 'NA', 'NA']


def FREEBAYES(format1, sample1):
    if sample1 == '.':
        return ['0','0','0','0','0']
    format1 = format1.split(':')
    sample1 = sample1.split(':')
    vaf = '0'
    idx_GT = format1.index('GT')
    idx_DP = format1.index('DP')
    idx_RO = format1.index('RO')
    idx_AO = format1.index('AO')
    if isDefinedLocally('idx_GT') and isDefinedLocally('idx_DP') and isDefinedLocally('idx_RO') and isDefinedLocally('idx_AO') and not ',' in sample1[idx_AO] and int(sample1[idx_AO]) >= 1:
        vaf = '%.2f' % round(int(sample1[idx_AO]) / int(sample1[idx_DP]),2)
        return [sample1[idx_GT], sample1[idx_DP], sample1[idx_RO], sample1[idx_AO], vaf]
    else:
        return [sample1[idx_GT], sample1[idx_DP], sample1[idx_RO], sample1[idx_AO], var]

def BAM2MPG(format1, sample1):
    if sample1 == '.':
        return ['0','0','0','0','0']
    format1 = format1.split(':')
    sample1 = sample1.split(':')
    vaf = '0'
    idx_GT = format1.index('GT')
    idx_DP = format1.index('DP')
    idx_AD = format1.index('AD')
    if isDefinedLocally('idx_GT') and isDefinedLocally('idx_AD') and isDefinedLocally('idx_DP'):
        ad = split(',', sample1[idx_AD])
        if len(ad) == 2 and int(ad[1]) >= 1 and int(sample1[idx_DP]) >= 1:
            vaf = '%.2f' % round(int(ad[1]) / int(sample1[idx_DP]),2)
            return[sample1[idx_GT], sample1[idx_DP], ad[0], ad[1], vaf]
        else:
            return [sample1[idx_GT], sample1[idx_DP], sample1[idx_AD], sample1[idx_AD], vaf]
    else:
        return [sample1, 'NA', 'NA', 'NA', 'NA']

def Platypus(format1,sample1):
    format1 = format1.split(':')
    sample1 = sample1.split(':')
    vaf = '0'
    total = '0'
    idx_GT = format1.index('GT')
    idx_NR = format1.index('NR')
    idx_NV = format1.index('NV')
    if not ',' in sample1[idx_NR] and not ',' in sample1[idx_NV]:
        total = str(int(sample1[idx_NR]) + int(sample1[idx_NV]))
        if int(sample1[idx_NV]) > 0:
            vaf = '%.2f' % round(int(sample1[idx_NV]) / int(total),2)
    return [sample1[idx_GT], total, sample1[idx_NR],sample1[idx_NV],vaf]

def FormatMuTect(format1):
    format1 = format1.split(':')
    if not isDefinedGlobally('GT'):
        GT = format1.index('GT')
    if not isDefinedGlobally('AD'):
        AD = format1.index('AD')
    if not isDefinedGlobally('DP'):
        DP = format1.index('DP')
    if not isDefinedGlobally('FA'):
        FA = format1.index('FA')
    return [GT,AD,DP,FA]
    

# Take Temporary location from command line
temp = sys.argv[2]
caller = 'caller'
input1 = sys.argv[1]
idx_normal = "0"
fname = os.path.basename(input1)
sname = re.sub(r'\..*$','',fname)
# Change list1 to str1 or something better...
list1 = subprocess.run('grep -m 1 -P "^#CHR" '+ input1 +' | cut -f 10-1000000' ,capture_output = True, text = True,shell = True, check = True).stdout
list1 = list1[:-1]
n_samples = list1.split('\t')

if 'vs' in sname:
    sname = sname.split('vs')[1]

############################
#
# load file as module instead of hard coded path 
# 
#
############################

convert2annovar = subprocess.run('which convert2annovar.pl' ,capture_output = True, text = True,shell = True, check = True).stdout.rstrip()
if not 'convert2annovar' in convert2annovar:
    sys.stderr.write('Please run module load annovar\n')
    sys.exit(1)

###########################
#
# Get the caller name from the VCF header
#   and get some tumor index for Mutect
#
############################


with open(input1, 'r') as infile:
    for line in infile.readlines():
        line = line.rstrip()
        if line[:2] == '##':
            if '##content=strelka somatic snv calls'.lower() in line.lower():
                caller = "STRELKA_S"
            elif '##content=strelka somatic indel calls' in line:
                caller = "STRELKA_I"
            elif 'MuTect'.lower() in line.lower():
                caller = 'MuTect'
                if len(n_samples) == 2:
                    if sname in n_samples[0]:
                        idx_normal = '1'
                else:
                    sys.stderr.write('Does not look like a 2 sample MuTect File\n')
                    sys.stderr.write('Samples found:\n')
                    sys.stderr.write('\n'.join(n_samples) + '\n')
                    sys.exit(1)
            elif 'Platypus'.lower() in line.lower():
                caller = 'Platypus'
            elif any(i.lower() in line.lower() for i in ['HaplotypeCaller','VQSR', 'UnifiedGenotyper']): # If VQSR is ran on vcf file the HaplotypeCaller tag gets taken out by GATK
                caller = 'GATK'
            elif 'freeBayes' in line:
                caller = 'freeBayes'
            elif 'VarScan2' in line:
                caller = 'varscan'
            elif '##source=bam2mpg' in line:
                caller = 'bam2mpg'
        else:
            break


##############################
#
# Process the data and write to screen
#
##############################



sys.stderr.write('It looks like a '+ caller +' vcf file\n')
if caller == 'varscan':
    #GT:GQ:DP:RD:AD:FREQ:DP4 0/1:.:30:14:16:53.33%:3,11,0,16
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null | cut-f 1-5,11-10000 > '+temp+'/'+sname+'.vs 2>'+temp+'/.err_'+sname+'.vs',shell = True)     
    print('Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName\tNormal.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq\tTumor.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq')
    with open(temp+'/'+sname+'.vs','r') as vcf:
        for line in vcf.readlines():
            line = line.rstrip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, normal, tumor = fields
            printme += '\t'.join([chr1, start, end, ref, alt, qual, filter1, info, sname])
            for i in [normal, tumor]:
                out = VARSCAN_S(format1,i)
                printme += '\t`' + '\t'.join(out[0:5])
            print(printme)
        #subprocess.run('rm -rf '+temp+'/'+sname+'.vs '+temp+'/.err_'+sname+'.vs',shell = True) 

elif caller == 'MuTect':
    with open(input1,'r') as vcf:
        for line in vcf.readlines():
            line = line.rstrip()
            if '##' in line:
                continue
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, *samples = fields
            end = start
            if chr1[:4].lower() == '#chr':
                if idx_normal == '0':
                    print('Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName\t'+samples[0]+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq\t'+samples[1]+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq')
                else:
                    print('Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName\t'+samples[1]+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq\t'+samples[0]+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq')
                continue
            if 'PASS' in filter1:
                printme = '\t'.join([chr1, start, end, ref, alt, qual, filter1, info, sname]) +'\t'
                if idx_normal == '0':
                    normal = samples[0]
                    tumor = samples[1]
                elif idx_normal == '1':
                    normal = samples[1]
                    tumor = samples[0]
                normal = normal.split(':')
                tumor = tumor.split(':')
                idx_gt, idx_ad, idx_dp, idx_fa = FormatMuTect(format1)
                normal[idx_ad] = re.sub(',','\t',normal[idx_ad])
                tumor[idx_ad] = re.sub(',','\t', tumor[idx_ad])
                printme += '\t'.join([normal[idx_gt], normal[idx_dp], normal[idx_ad], normal[idx_fa]]) + '\t'
                printme += '\t'.join([tumor[idx_gt], tumor[idx_dp], tumor[idx_ad], tumor[idx_fa]])
                print(printme)
                


elif(caller == 'STRELKA_S'):
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null | cut -f 1-5,11-10000 > '+temp+'/'+sname+'.s 2>'+temp+'/.err_'+sname+'.s',shell = True) 
    printme =  'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp+'/'+sname+'.s','r') as vcf:
        for line in vcf.readlines():
            line = line.rstrip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, normal, tumor = fields
            if not 'PASS' in filter1:
                continue
            printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info,sname]) + '\t'
            format1 = format1.split(':')
            if not isDefinedGlobally('idx_A'):
                idx_A = format1.index('AU')
            if not isDefinedGlobally('idx_C'):
                idx_C = format1.index('CU')
            if not isDefinedGlobally('IDX_G'):
                idx_G = format1.index('GU')
            if not isDefinedGlobally('idx_T'):
                idx_T = format1.index('TU')
            normal = normal.split(':')
            tumor = tumor.split(':')
            if 'A' in ref:
                ref_tumor = tumor[idx_A].split(',')
                ref_normal = normal[idx_A].split(',')
            elif 'C' in ref:
                ref_tumor = tumor[idx_C].split(',')
                ref_normal = normal[idx_C].split(',')
            elif 'G' in ref:
                ref_tumor = tumor[idx_G].split(',')
                ref_normal = normal[idx_G].split(',')
            elif 'T' in ref:
                ref_tumor = tumor[idx_T].split(',')
                ref_normal = normal[idx_T].split(',')
            if 'A' in alt:
                alt_tumor = tumor[idx_A].split(',')
                alt_normal = normal[idx_A].split(',')
            elif 'C' in alt:
                alt_tumor = tumor[idx_C].split(',')
                alt_normal = normal[idx_C].split(',')
            elif 'G' in alt:
                alt_tumor = tumor[idx_G].split(',')
                alt_normal = normal[idx_G].split(',')
            elif 'T' in alt:
                alt_tumor = tumor[idx_T].split(',')
                alt_normal = normal[idx_T].split(',')
            alt_normal[0], alt_tumor[0], ref_normal[0], ref_tumor[0] = [int(i) for i in [alt_normal[0], alt_tumor[0], ref_normal[0], ref_tumor[0]]]
            total_normal = ref_normal[0] + alt_normal[0]
            vaf_normal = 0
            if total_normal > 0:
                vaf_normal = '%.2f' % round(alt_normal[0] / total_normal,2)
            total_tumor = ref_tumor[0] + alt_tumor[0]
            vaf_tumor = 0
            if total_tumor > 0:
                vaf_tumor = '%.2f' % round(alt_tumor[0] / total_tumor,2)
            printme += '\t'.join([str(i) for i in['NA', total_normal,ref_normal[0], alt_normal[0], vaf_normal, 'NA', total_tumor, ref_tumor[0], alt_tumor[0], vaf_tumor]])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.s '+temp+'/.err_'+sname+'.s',shell = True) 

elif caller == 'STRELKA_I':
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null| cut -f 1-5,11-10000 > '+temp+'/'+sname+'.i 2>'+temp+'/.err_'+sname+'.i',shell = True) 
    printme = 'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp+'/'+sname+'.i','r') as vcf:
        for line in vcf.readlines():
            line = line.strip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, normal, tumor = fields
            if not 'PASS' in filter1:
                continue
            printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info ,sname]) + '\t'
            format1 = format1.split(':')
            if not isDefinedGlobally('DPindex'):
                DPindex = format1.index('DP')
            if not isDefinedGlobally('TIRindex'):
                TIRindex = format1.index('TIR')
            #Assign Normals
            normal = normal.split(':')
            total_normal = normal[DPindex]
            alt_normal = normal[TIRindex].split(',')
            #Assign Tumors
            tumor = tumor.split(':')
            total_tumor = tumor[DPindex]
            alt_tumor = tumor[TIRindex].split(',')
            #cast to int
            total_normal, alt_normal[0], total_tumor, alt_tumor[0] = [int(i) for i in [total_normal, alt_normal[0], total_tumor, alt_tumor[0]]]
            #Math normals
            ref_normal = total_normal - alt_normal[0]
            vaf_normal = 0
            if alt_normal[0] > 0:
                vaf_normal = '%.2f' % round(alt_normal[0] / total_normal,2)
            #Math Tumors
            ref_tumor = total_tumor - alt_tumor[0]
            vaf_tumor = 0
            if alt_tumor[0] > 0:
                vaf_tumor = '%.2f' % round(alt_tumor[0] / total_tumor,2)
            #Print results as strings
            printme +='\t'.join([str(i) for i in ['NA', total_normal,ref_normal, alt_normal[0], vaf_normal, 'NA', total_tumor, ref_tumor, alt_tumor[0], vaf_tumor]])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.i '+temp+'/.err_'+sname+'.i',shell = True) 

elif caller == 'Platypus':
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null| cut -f 1-5,11-10000 > '+temp+'/'+sname+'.p 2>'+temp+'/.err_'+sname+'.p',shell = True) 
    printme = 'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp + '/' + sname +'.p','r') as vcf:
        for line in vcf.readlines():
            line = line.strip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, *samples = fields
            printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info ,sname]) #+ '\t'
            for sample in samples:
                out = Platypus(format1, sample)
                printme += '\t`' + '\t'.join(out[:5])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.p '+temp+'/.err_'+sname+'.p',shell = True) 

elif caller == 'GATK':
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null| cut -f 1-5,11-10000 > '+temp+'/'+sname+'.g 2>'+temp+'/.err_'+sname+'.g',shell = True) 
    printme = 'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp + '/' + sname +'.g','r') as vcf:
        for line in vcf.readlines():
            line = line.strip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, *samples = fields
            printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info ,sname])
            for sample in samples:
                out = GATK(format1, sample)
                printme += '\t`' + '\t'.join(out[:5])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.g '+temp+'/.err_'+sname+'.g',shell = True) 

            
elif caller == 'freeBayes':
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null| cut -f 1-5,11-10000 > '+temp+'/'+sname+'.fb 2>'+temp+'/.err_'+sname+'.fb',shell = True) 
    printme = 'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp + '/' + sname +'.fb', 'r') as vcf:
        for line in vcf.readlines():
            line = line.strip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, *samples = fields
            printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info ,sname]) + '\t'
            for sample in samples:
                out = FREEBAYES(format1, sample)
                printme += '\t`' + '\t'.join(out[:5])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.fb '+temp+'/.err_'+sname+'.fb',shell = True) 

elif caller == 'bam2mpg':
    subprocess.run('perl '+convert2annovar+' --format vcf4old --includeinfo '+input1+' 2>/dev/null| cut -f 1-5,11-10000 > '+temp+'/'+sname+'.mpg 2>'+temp+'/.err_'+sname+'.mpg',shell = True) 
    printme = 'Chr\tStart\tEnd\tRef\tAlt\tQUAL\tFILTER\tINFO\tSampleName'
    for sample in n_samples:
        printme += '\t'+sample+'.GT\tTotalCoverage\tRefCoverage\tVarCoverage\tVariant Allele Freq'
    print(printme)
    with open(temp + '/' + sname +'.mpg', 'r') as vcf:
        for line in vcf.readlines():
            line = line.strip()
            fields = line.split('\t')
            chr1, start, end, ref, alt, qual, filter1, info, format1, *samples = fields
            if re.search(r'\d+',qual) and qual >= 10:
                printme = '\t'.join([chr1,start, end, ref,alt, qual, filter1, info ,sname]) + '\t'
            for sample in samples:
                out = BAM2MPG(format1, sample)
                printme += '\t`' + '\t'.join(out[:5])
            print(printme)
    #subprocess.run('rm -rf '+temp+'/'+sname+'.fb '+temp+'/.err_'+sname+'.fb',shell = True) 
                
else:
    sys.stderr.write('This vcf file is not supported.\n')
    sys.stderr.write('Can not determine the type of VCF file\n')
    sys.exit(1)












